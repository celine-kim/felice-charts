apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "kafka.fullname" . }}
spec:
  selector:
    matchLabels:
      {{- include "kafka.selectorLabels" . | nindent 6 }}
  serviceName: {{ include "kafka.fullname" . }}-hs
  replicas: {{ .Values.replicaCount }}
  updateStrategy:
    type: RollingUpdate 
  podManagementPolicy: OrderedReady 
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "kafka.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "kafka.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
      #### KAFKA CONTAINER ####
      - name: {{ .Chart.Name }}
        securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
        image: "{{ .Values.images.registry }}/{{ .Chart.Name }}:{{ .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.images.pullPolicy }}
        ports:
        - containerPort: {{ .Values.service.port }}  
          name: client
          protocol: TCP
        - containerPort: 9100
          name: node-exporter
        readinessProbe:
          tcpSocket:
            port: {{ .Values.service.port }} 
          timeoutSeconds: 2
        startupProbe:
          tcpSocket:
            port: {{ .Values.service.port }}
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 2
          failureThreshold: 300
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        env:
          - name: KAFKA_ZOOKEEPER_CONNECT
            value: {{ .Values.configs.zookeeperConnect }}
          - name: KAFKA_LOG_DIRS   ## fix for block storage!!
            value: /data/kafka
          - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
            value: {{ .Values.configs.protocolMap }}
          - name: KAFKA_HEAP_OPTS
            {{- $heap := .Values.resources.requests.memory | mustRegexFind "[1-9]+" | atoi }}
            {{- $heap = div (mul $heap 3) 4 }}
            value: -Xmx{{ $heap }}G -Xms{{ $heap }}G
          - name: KAFKA_JVM_PERFORMANCE_OPTS
            value: "-server -XX:MetaspaceSize=96m -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:G1HeapRegionSize=16M -XX:MinMetaspaceFreeRatio=50 -XX:MaxMetaspaceFreeRatio=80 -Djava.awt.headless=true"
          {{- with .Values.configs.optional }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
        volumeMounts:
        - name: {{ include "kafka.fullname" . }}-logdir
          mountPath: /data
        - name: broker-envs
          mountPath: /config/kubernetes
      #### NODE-EXPORTER CONTAINER ####
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      # {{- with .Values.affinity }}
      # affinity:
      #   {{- toYaml . | nindent 8 }}
      # {{- end }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - {{ include "kafka.fullname" . }}
              topologyKey: "kubernetes.io/hostname"
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      #### volumes
      volumes:
          - name: {{ include "kafka.fullname" . }}-logdir
            emptyDir: {}
          - name: broker-envs
            emptyDir: {}
